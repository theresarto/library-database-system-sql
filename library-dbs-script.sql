-- 1 CREATE -----------------------------------------------------------------------------------------

DROP TABLE users CASCADE CONSTRAINTS;

-- Create the users table
CREATE TABLE users (
    user_id NUMBER(9, 0) PRIMARY KEY,
    user_full_name VARCHAR2(100) NOT NULL,
    user_email VARCHAR2(100) UNIQUE NOT NULL,
    user_home_address VARCHAR2(255),
    user_type VARCHAR2(10) CHECK (user_type IN ('Student', 'Staff')),
    user_account_status VARCHAR2(10) CHECK (user_account_status IN ('Active', 'Suspended')),
    loan_limit NUMBER
);


-- DELETE THIS TRIGGER AFTER INITIAL INSERTION HAS BEEN DONE.
CREATE OR REPLACE TRIGGER set_default_loan_limit
BEFORE INSERT ON users
FOR EACH ROW
BEGIN
    -- Dynamically set loan_limit based on user_type
    IF :NEW.loan_limit IS NULL THEN
        IF :NEW.user_type = 'Student' THEN
            :NEW.loan_limit := 5;
        ELSIF :NEW.user_type = 'Staff' THEN
            :NEW.loan_limit := 10;
        ELSE
            :NEW.loan_limit := 0; -- Default fallback (optional, for unexpected user types)
        END IF;
    END IF;
END;
/

DROP TABLE resources CASCADE CONSTRAINTS;

-- Create the resources table
CREATE TABLE resources (
    resource_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    location VARCHAR2(100),
    loan_period NUMBER(5)
);

DROP TABLE devices CASCADE CONSTRAINTS;

-- Create the devices table
CREATE TABLE devices (
    device_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    resource_id NUMBER REFERENCES resources(resource_id) ON DELETE CASCADE,
    manufacturer VARCHAR2(100),
    model_number VARCHAR2(100),
    device_type VARCHAR2(50) NOT NULL
);

DROP TABLE books CASCADE CONSTRAINTS;

-- Create the books table
CREATE TABLE books (
    book_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    resource_id NUMBER REFERENCES resources(resource_id) ON DELETE CASCADE,
    title VARCHAR2(255) NOT NULL,
    author VARCHAR2(255) NOT NULL,
    class_number NUMBER,
    isbn VARCHAR2(20) UNIQUE,
    book_format VARCHAR2(50) CHECK (book_format IN ('Physical Book', 'Ebook'))
);

DROP TABLE copies CASCADE CONSTRAINTS;

-- Create the copies table
CREATE TABLE copies (
    resource_id NUMBER REFERENCES resources(resource_id) ON DELETE CASCADE,
    copy_num NUMBER,
    serial_number VARCHAR2(50) UNIQUE,
    availability_status VARCHAR2(10) CHECK (availability_status IN ('Available', 'Loaned')),
    PRIMARY KEY (resource_id, copy_num)
);


DROP TABLE reservations CASCADE CONSTRAINTS;

-- Create the reservations table
CREATE TABLE reservations (
    reservation_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES users(user_id) ON DELETE CASCADE,
    resource_id NUMBER REFERENCES resources(resource_id) ON DELETE CASCADE,
    reserv_date DATE DEFAULT SYSDATE,
    reserv_notif_date DATE,
    reserv_expir_date DATE,
    reserv_decline_count NUMBER DEFAULT 0 CHECK (reserv_decline_count <= 3)
);


DROP TABLE loans CASCADE CONSTRAINTS;

-- Create the loans table
CREATE TABLE loans (
    loan_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    loan_date DATE NOT NULL,
    loan_due_date DATE,
    user_id NUMBER REFERENCES users(user_id) ON DELETE CASCADE,
    resource_id NUMBER NOT NULL,
    copy_num NUMBER NOT NULL,
    loan_return_date DATE,
    FOREIGN KEY (resource_id, copy_num) REFERENCES copies(resource_id, copy_num) ON DELETE CASCADE
);


-- Created an index to ensure that we cannot have 2 copies of the same resource taken out at the same time
CREATE UNIQUE INDEX unique_active_loans_idx
ON loans (
    CASE 
        WHEN loan_return_date IS NULL THEN resource_id
        ELSE NULL
    END,
    CASE 
        WHEN loan_return_date IS NULL THEN copy_num
        ELSE NULL
    END
);


DROP TABLE fines CASCADE CONSTRAINTS;

-- Create the fines table
CREATE TABLE fines (
    fine_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    loan_id NUMBER REFERENCES loans(loan_id) ON DELETE CASCADE,
    user_id NUMBER REFERENCES users(user_id) ON DELETE CASCADE,
    fine_amt NUMBER,
    fine_status VARCHAR2(10) CHECK (fine_status IN ('PAID', 'NOT PAID')),
    fine_date DATE
);



-- 2 INSERT USERS -----------------------------------------------------------------------------------------

INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202331330, 'Rose Gamble', 'rose.gamble@adp.ac.uk', '84 Oak Drive, London, SE14 5XS', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202285795, 'Timothy Frank', 'timothy.frank@adp.ac.uk', '53 Magnolia Way, London, SW12 1UR', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202343920, 'Steven Ellis', 'steven.ellis@adp.ac.uk', '26 Rose Lane, London, NW10 7PL', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202460717, 'Ella Brown', 'ella.brown@adp.ac.uk', '45 Elm Street, London, E14 6BT', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202415742, 'Jack Moore', 'jack.moore@adp.ac.uk', '78 Willow Lane, London, N1 8QW', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202333711, 'Henry Smith', 'henry.smith@adp.ac.uk', '5 Maple Avenue, London, SE1 4LX', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202424207, 'Emily Johnson', 'emily.johnson@adp.ac.uk', '14 Birch Road, London, SW9 1RG', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202448446, 'Michael Clark', 'michael.clark@adp.ac.uk', '62 Cedar Drive, London, NW2 5ST', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202447890, 'Sarah Walker', 'sarah.walker@adp.ac.uk', '8 Cherry Street, London, E1 7DB', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202244677, 'Liam King', 'liam.king@adp.ac.uk', '10 Walnut Avenue, London, W11 3HQ', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202297777, 'Sophia Carter', 'sophia.carter@adp.ac.uk', '37 Beech Close, London, SE19 1PS', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202346911, 'James Lewis', 'james.lewis@adp.ac.uk', '19 Elm Grove, London, SW15 3AD', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202221592, 'Olivia Harris', 'olivia.harris@adp.ac.uk', '59 Pine Walk, London, E2 8QR', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202437815, 'Benjamin Lee', 'benjamin.lee@adp.ac.uk', '32 Cedar Road, London, N4 1FX', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202271017, 'Emma Davis', 'emma.davis@adp.ac.uk', '44 Oak Terrace, London, SE22 8PA', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202267393, 'Mason Hall', 'mason.hall@adp.ac.uk', '22 Maple Lane, London, SW8 5JD', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202211233, 'Charlotte Young', 'charlotte.young@adp.ac.uk', '31 Birch Crescent, London, E3 5JD', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202429647, 'Ethan Wright', 'ethan.wright@adp.ac.uk', '17 Walnut Close, London, NW6 7JH', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202367666, 'Amelia Martin', 'amelia.martin@adp.ac.uk', '28 Cherry Lane, London, E17 9PT', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202254578, 'Logan Allen', 'logan.allen@adp.ac.uk', '9 Beech Terrace, London, SW3 1RT', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202498064, 'Isabella Adams', 'isabella.adams@adp.ac.uk', '48 Pine Walk, London, SE25 3FH', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202387579, 'Lucas Scott', 'lucas.scott@adp.ac.uk', '6 Cedar Avenue, London, E14 7DF', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202335552, 'Ava Mitchell', 'ava.mitchell@adp.ac.uk', '11 Oak Close, London, NW11 7RA', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202270833, 'Jacob Parker', 'jacob.parker@adp.ac.uk', '13 Maple Grove, London, SW12 4LT', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202392700, 'Mia Green', 'mia.green@adp.ac.uk', '25 Birch Avenue, London, N16 5PU', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202321415, 'Daniel Turner', 'daniel.turner@adp.ac.uk', '43 Walnut Crescent, London, SE6 1JD', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202332267, 'Harper Edwards', 'harper.edwards@adp.ac.uk', '14 Cherry Terrace, London, NW8 6RD', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202322746, 'William White', 'william.white@adp.ac.uk', '35 Beech Lane, London, SW5 3HG', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202248681, 'Evelyn Thompson', 'evelyn.thompson@adp.ac.uk', '29 Pine Close, London, E10 8JF', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202351058, 'Alexander Hughes', 'alexander.hughes@adp.ac.uk', '21 Cedar Grove, London, SE27 1PW', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202474146, 'Chloe Roberts', 'chloe.roberts@adp.ac.uk', '7 Oak Avenue, London, NW9 2JT', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202475036, 'Sebastian Price', 'sebastian.price@adp.ac.uk', '12 Maple Lane, London, SE21 3FL', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202478705, 'Ella Simmons', 'ella.simmons@adp.ac.uk', '30 Birch Crescent, London, SW4 6FP', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202442989, 'Caleb Powell', 'caleb.powell@adp.ac.uk', '50 Walnut Grove, London, N15 4JP', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202255506, 'Lily Bell', 'lily.bell@adp.ac.uk', '18 Cherry Avenue, London, E15 5FG', 'Student', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (201277987, 'Aiden Murphy', 'aiden.murphy@adp.ac.uk', '41 Beech Walk, London, SE5 8PT', 'Staff', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (199597776, 'Grace Ward', 'grace.ward@adp.ac.uk', '24 Pine Lane, London, SW16 7DS', 'Staff', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202136290, 'Gabriel Foster', 'gabriel.foster@adp.ac.uk', '3 Cedar Crescent, London, NW1 5TR', 'Staff', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (199027462, 'Ellie Sanders', 'ellie.sanders@adp.ac.uk', '16 Oak Grove, London, E16 9FT', 'Staff', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (200317178, 'Jackson Cook', 'jackson.cook@adp.ac.uk', '27 Maple Walk, London, SE17 6QP', 'Staff', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (200644770, 'Scarlett Ross', 'scarlett.ross@adp.ac.uk', '8 Birch Terrace, London, SW18 4PS', 'Staff', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202289533, 'Anthony Phillips', 'anthony.phillips@adp.ac.uk', '42 Walnut Road, London, NW3 7LF', 'Staff', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (200675782, 'Layla Bailey', 'layla.bailey@adp.ac.uk', '23 Cherry Crescent, London, E13 8QH', 'Staff', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (199151978, 'Andrew Fisher', 'andrew.fisher@adp.ac.uk', '34 Beech Walk, London, SE23 5JL', 'Staff', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (200248712, 'Aria Evans', 'aria.evans@adp.ac.uk', '10 Pine Grove, London, SW7 3PG', 'Staff', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202467706, 'Ryan Murphy', 'ryan.murphy@adp.ac.uk', '20 Cedar Walk, London, NW4 6LP', 'Staff', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (199172725, 'Hannah Reed', 'hannah.reed@adp.ac.uk', '15 Oak Lane, London, E12 7PQ', 'Staff', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202224759, 'Carter Peterson', 'carter.peterson@adp.ac.uk', '38 Maple Road, London, SE24 8FG', 'Staff', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (200263880, 'Sofia Gray', 'sofia.gray@adp.ac.uk', '46 Birch Avenue, London, SW19 5LG', 'Staff', 'Active');
INSERT INTO users (user_id, user_full_name, user_email, user_home_address, user_type, user_account_status) VALUES (202147977, 'Owen Wood', 'owen.wood@adp.ac.uk', '19 Walnut Close, London, NW5 7QP', 'Staff', 'Active');

-- DROP TRIGGER set_default_loan_limit;


-- INSERT RESOURCES -----------------------------------------------------------------------------------------

insert into resources (location, loan_period) VALUES ('X-000', 21);
insert into resources (location, loan_period) VALUES ('0-072', 21);
insert into resources (location, loan_period) VALUES ('2-018', 21);
insert into resources (location, loan_period) VALUES ('X-000', 21);
insert into resources (location, loan_period) VALUES ('2-029', 21);
insert into resources (location, loan_period) VALUES ('0-028', 21);
insert into resources (location, loan_period) VALUES ('X-000', 21);
insert into resources (location, loan_period) VALUES ('0-050', 21);
insert into resources (location, loan_period) VALUES ('0-075', 21);
insert into resources (location, loan_period) VALUES ('X-000', 21);
insert into resources (location, loan_period) VALUES ('0-006', 21);
insert into resources (location, loan_period) VALUES ('1-021', 21);
insert into resources (location, loan_period) VALUES ('X-000', 21);
insert into resources (location, loan_period) VALUES ('1-028', 21);
insert into resources (location, loan_period) VALUES ('0-000', 21);
insert into resources (location, loan_period) VALUES ('X-000', 21);
insert into resources (location, loan_period) VALUES ('0-000', 21);
insert into resources (location, loan_period) VALUES ('0-000', 21);
insert into resources (location, loan_period) VALUES ('1-073', 3);
insert into resources (location, loan_period) VALUES ('1-019', 3);
insert into resources (location, loan_period) VALUES ('2-053', 3);
insert into resources (location, loan_period) VALUES ('1-015', 3);
insert into resources (location, loan_period) VALUES ('0-063', 3);
insert into resources (location, loan_period) VALUES ('1-066', 3);
insert into resources (location, loan_period) VALUES ('0-093', 3);



-- INSERT BOOKS -----------------------------------------------------------------------------------------

INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (1, 1, 'The Quantum Enigma', 'Dr. Alice Hawthorne', 530, '978-3-32-442443-6', 'Ebook');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (2, 2, 'Culinary Adventures', 'Chef Marco Rossi', 641, '978-1-72-068043-6', 'Physical Book');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (3, 3, 'History of the Renaissance', 'Dr. Peter Campbell', 940, '978-8-35-246400-6', 'Physical Book');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (4, 4, 'Introduction to Psychology', 'Dr. Lena Ortega', 150, '978-2-57-081911-2', 'Ebook');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (5, 5, 'Algorithms and Data Structures', 'John Tanaka', 5, '978-6-31-363733-8', 'Physical Book');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (6, 6, 'The Art of Meditation', 'Sarah Ling', 158, '978-4-22-116924-0', 'Physical Book');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (7, 7, 'The Solar System Explained', 'Dr. Emily Wu', 523, '978-7-26-155231-3', 'Ebook');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (8, 8, 'Ecology and Environment', 'Dr. Robert Yang', 577, '978-7-27-172716-9', 'Physical Book');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (9, 9, 'French Grammar Simplified', 'Marie Dubois', 448, '978-7-13-908910-4', 'Physical Book');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (10, 10, 'The Poetry of Nature', 'William J. Roberts', 811, '978-1-59-968165-0', 'Ebook');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (11, 11, 'Astrophysics Essentials', 'Dr. Carla Jensen', 523, '978-6-06-037118-8', 'Physical Book');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (12, 12, 'Exploring Ancient Civilizations', 'Dr. Mike Henders', 930, '978-2-39-316881-1', 'Physical Book');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (13, 13, 'Fundamentals of Chemistry', 'Prof. Leah Gupta', 540, '978-5-58-443714-3', 'Ebook');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (14, 14, 'American Politics Today', 'Dr. Stephen Marks', 320, '978-5-06-289767-9', 'Physical Book');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (15, 15, 'Advanced Microbiology', 'Dr. Jane Peterson', 579, '978-6-43-986967-6', 'Physical Book');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (16, 16, 'Modern Architecture', 'Anna Ferguson', 720, '978-7-74-791701-2', 'Ebook');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (17, 17, 'Wildlife of North America', 'Jake Roberts', 599, '978-9-28-340413-3', 'Physical Book');
INSERT INTO books (book_id, resource_id, title, author, class_number, isbn, book_format) VALUES (18, 18, 'Sociology in the Modern Age', 'Dr. Elaine Voss', 301, '978-9-27-620798-7', 'Physical Book');


-- INSERT DEVICES -----------------------------------------------------------------------------------------

INSERT INTO devices (device_id, resource_id, manufacturer, model_number, device_type) VALUES (1, 19, 'ALIENWARE', 'M16 R2', 'LAPTOP');
INSERT INTO devices (device_id, resource_id, manufacturer, model_number, device_type) VALUES (2, 20, 'HP', 'Dragonfly G4', 'LAPTOP');
INSERT INTO devices (device_id, resource_id, manufacturer, model_number, device_type) VALUES (3, 21, 'KINDLE', 'Paperwhite', 'E-READER');
INSERT INTO devices (device_id, resource_id, manufacturer, model_number, device_type) VALUES (4, 22, 'SAMSUNG', 'Galaxy Tab S8', 'TABLET');
INSERT INTO devices (device_id, resource_id, manufacturer, model_number, device_type) VALUES (5, 23, 'DELL', 'XPS 13', 'LAPTOP');
INSERT INTO devices (device_id, resource_id, manufacturer, model_number, device_type) VALUES (6, 24, 'APPLE', 'iPad Pro', 'TABLET');
INSERT INTO devices (device_id, resource_id, manufacturer, model_number, device_type) VALUES (7, 25, 'KOBO', 'Clara HD', 'E-READER');



-- INSERT COPIES -----------------------------------------------------------------------------------------

INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (1, 1, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (1, 2, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (1, 3, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (1, 4, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (2, 1, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (2, 2, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (2, 3, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (2, 4, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (2, 5, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (3, 1, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (3, 2, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (3, 3, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (3, 4, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (3, 5, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (4, 1, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (4, 2, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (4, 3, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (4, 4, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (5, 1, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (5, 2, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (5, 3, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (6, 1, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (6, 2, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (7, 1, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (7, 2, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (8, 1, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (8, 2, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (8, 3, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (9, 1, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (9, 2, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (9, 3, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (9, 4, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (9, 5, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (9, 6, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (10, 1, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (11, 1, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (11, 2, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (11, 3, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (11, 4, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (11, 5, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (11, 6, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (12, 1, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (13, 1, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (13, 2, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (13, 3, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (13, 4, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (14, 1, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (14, 2, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (14, 3, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (15, 1, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (15, 2, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (15, 3, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (16, 1, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (16, 2, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (16, 3, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (17, 1, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (17, 2, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (17, 3, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (17, 4, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (18, 1, NULL, 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (18, 2, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (18, 3, NULL, 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (19, 1, 'AW2022RGX28AP', 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (19, 2, 'AW2023RGTT9SX', 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (20, 1, 'B0B2896', 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (20, 2, '5CGX2J45', 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (21, 1, 'B08H3W78R', 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (21, 2, 'B08H2KS872', 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (21, 3, 'B08HA19SV', 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (22, 1, 'RF9827482', 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (22, 2, 'RF3926181', 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (22, 3, 'RF8682641', 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (23, 1, '3YX0C01', 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (23, 2, '9HR90C4', 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (23, 3, '7WX14K8', 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (24, 1, 'DMPYR0F8K8', 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (24, 2, 'R974RUOY6210', 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (24, 3, 'J0D4CXJU2269', 'Loaned');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (25, 1, 'KO8607AP', 'Available');
INSERT INTO copies (resource_id, copy_num, serial_number, availability_status) VALUES (25, 2, 'KO5908LO', 'Available');



-- VIEW: BOOK AVAILABILITY -----------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW book_availability AS
SELECT
    r.resource_id,
    b.title AS book_title,
    b.author AS book_author,
    b.isbn AS book_isbn,
    b.book_format AS book_format,
    SUM(CASE WHEN c.availability_status = 'Available' THEN 1 ELSE 0 END) AS available_copies,
    SUM(CASE WHEN c.availability_status = 'Loaned' THEN 1 ELSE 0 END) AS unavailable_copies
FROM resources r
INNER JOIN books b ON r.resource_id = b.resource_id
LEFT JOIN copies c ON r.resource_id = c.resource_id
GROUP BY r.resource_id, b.title, b.author, b.isbn, b.book_format;



-- VIEW: DEVICE AVAILABILITY -----------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW device_availability AS
SELECT
    r.resource_id,
    d.manufacturer AS device_manufacturer,
    d.model_number AS device_model_number,
    d.device_type AS device_type,
    SUM(CASE WHEN c.availability_status = 'Available' THEN 1 ELSE 0 END) AS available_copies,
    SUM(CASE WHEN c.availability_status = 'Loaned' THEN 1 ELSE 0 END) AS unavailable_copies
FROM resources r
INNER JOIN devices d ON r.resource_id = d.resource_id
LEFT JOIN copies c ON r.resource_id = c.resource_id
GROUP BY r.resource_id, d.manufacturer, d.model_number, d.device_type;


-- VIEW: USER LOAN COUNT -----------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW user_loans_count AS
SELECT 
    u.user_id,
    u.user_full_name,
    u.user_type,
    COUNT(l.loan_id) AS total_loans
FROM 
    users u
LEFT JOIN 
    loans l ON u.user_id = l.user_id
GROUP BY 
    u.user_id, u.user_full_name, u.user_type
ORDER BY 
    total_loans DESC;


-- VIEW: RESOURCE_TYPE -----------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW resource_type_view AS
SELECT 
    RESOURCE_ID, 
    TITLE AS NAME, 
    'Book' AS resource_type, 
    BOOK_FORMAT AS resource_subtype
FROM 
    Books
UNION ALL
SELECT 
    RESOURCE_ID, 
    MANUFACTURER || ' ' || MODEL_NUMBER AS NAME, 
    'Device' AS resource_type, 
    DEVICE_TYPE AS resource_subtype
FROM 
    Devices;



-- 3 TRIGGER: SET_LOAN_DUE_DATE -----------------------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER set_loan_due_date_trigger
BEFORE INSERT ON loans
FOR EACH ROW
DECLARE
    resource_type VARCHAR2(20); -- Variable to hold the resource type
BEGIN
    -- Fetch the resource type from resource_type_view
    SELECT resource_type
    INTO resource_type
    FROM resource_type_view
    WHERE resource_id = :NEW.resource_id;

    -- Set loan_due_date based on resource type
    IF resource_type = 'Book' THEN
        :NEW.loan_due_date := :NEW.loan_date + 21;
    ELSIF resource_type = 'Device' THEN
        :NEW.loan_due_date := :NEW.loan_date + 3;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Invalid resource_type for resource_id: ' || :NEW.resource_id);
    END IF;
END;
/



-- 3a INSERT: LOAN RECORDS -----------------------------------------------------------------------------------------

INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-08-07', 'YYYY-MM-DD'), '199027462', '21', '1', TO_DATE('2024-08-08', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-09-12', 'YYYY-MM-DD'), '199151978', '20', '1', TO_DATE('2024-09-20', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-09-12', 'YYYY-MM-DD'), '200248712', '25', '1', TO_DATE('2024-09-14', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-09-16', 'YYYY-MM-DD'), '202322746', '2', '3', TO_DATE('2024-10-10', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-09-18', 'YYYY-MM-DD'), '202248681', '9', '1', TO_DATE('2024-10-12', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-09-18', 'YYYY-MM-DD'), '202333711', '11', '2', TO_DATE('2024-10-09', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-09-18', 'YYYY-MM-DD'), '202333711', '16', '2', TO_DATE('2024-10-09', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-09-26', 'YYYY-MM-DD'), '202221592', '9', '2', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-09-27', 'YYYY-MM-DD'), '202289533', '10', '1', TO_DATE('2024-10-03', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-09-27', 'YYYY-MM-DD'), '202415742', '13', '3', TO_DATE('2024-10-07', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-09-28', 'YYYY-MM-DD'), '200317178', '13', '2', TO_DATE('2024-09-30', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-10-02', 'YYYY-MM-DD'), '202267393', '11', '4', TO_DATE('2024-10-09', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-10-02', 'YYYY-MM-DD'), '202267393', '17', '1', TO_DATE('2024-10-09', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-10-03', 'YYYY-MM-DD'), '202289533', '2', '4', TO_DATE('2024-11-02', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-10-08', 'YYYY-MM-DD'), '202442989', '23', '3', TO_DATE('2024-11-10', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-10-10', 'YYYY-MM-DD'), '202415742', '16', '2', TO_DATE('2024-10-31', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-10-10', 'YYYY-MM-DD'), '202335552', '17', '2', TO_DATE('2024-11-22', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-10-29', 'YYYY-MM-DD'), '202267393', '1', '2', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-10-29', 'YYYY-MM-DD'), '199027462', '3', '3', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-01', 'YYYY-MM-DD'), '202367666', '3', '1', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-01', 'YYYY-MM-DD'), '202254578', '6', '1', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-01', 'YYYY-MM-DD'), '202424207', '11', '3', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-01', 'YYYY-MM-DD'), '202424207', '14', '2', TO_DATE('2024-11-07', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-02', 'YYYY-MM-DD'), '202289533', '8', '1', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-03', 'YYYY-MM-DD'), '199027462', '1', '4', TO_DATE('2024-11-24', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-04', 'YYYY-MM-DD'), '202321415', '4', '3', TO_DATE('2024-11-25', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-04', 'YYYY-MM-DD'), '202332267', '5', '2', TO_DATE('2024-11-21', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-05', 'YYYY-MM-DD'), '202367666', '5', '1', TO_DATE('2024-11-10', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-07', 'YYYY-MM-DD'), '202415742', '14', '2', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-07', 'YYYY-MM-DD'), '202254578', '16', '3', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-09', 'YYYY-MM-DD'), '202321415', '9', '3', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-09', 'YYYY-MM-DD'), '200263880', '18', '2', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-10', 'YYYY-MM-DD'), '202367666', '12', '1', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-10', 'YYYY-MM-DD'), '202335552', '18', '3', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-12', 'YYYY-MM-DD'), '202248681', '1', '3', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-12', 'YYYY-MM-DD'), '202429647', '2', '2', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-12', 'YYYY-MM-DD'), '202289533', '3', '2', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-12', 'YYYY-MM-DD'), '202244677', '9', '6', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-13', 'YYYY-MM-DD'), '202392700', '3', '4', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-13', 'YYYY-MM-DD'), '202498064', '6', '2', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-13', 'YYYY-MM-DD'), '202424207', '7', '1', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-13', 'YYYY-MM-DD'), '202244677', '22', '1', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-16', 'YYYY-MM-DD'), '200263880', '21', '1', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-17', 'YYYY-MM-DD'), '202322746', '11', '1', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-18', 'YYYY-MM-DD'), '202244677', '14', '3', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-20', 'YYYY-MM-DD'), '202448446', '20', '2', TO_DATE('2024-11-23', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-20', 'YYYY-MM-DD'), '202346911', '23', '3', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-21', 'YYYY-MM-DD'), '202424207', '1', '1', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-21', 'YYYY-MM-DD'), '202437815', '3', '5', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-21', 'YYYY-MM-DD'), '202254578', '19', '2', TO_DATE('2024-11-24', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-21', 'YYYY-MM-DD'), '202424207', '23', '1', TO_DATE('2024-11-24', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-21', 'YYYY-MM-DD'), '199172725', '24', '2', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-22', 'YYYY-MM-DD'), '202429647', '4', '4', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-22', 'YYYY-MM-DD'), '202254578', '14', '1', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-22', 'YYYY-MM-DD'), '200263880', '17', '1', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-22', 'YYYY-MM-DD'), '202211233', '21', '2', NULL);
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-22', 'YYYY-MM-DD'), '202335552', '22', '3', TO_DATE('2024-11-25', 'YYYY-MM-DD'));
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date) VALUES (TO_DATE('2024-11-22', 'YYYY-MM-DD'), '202321415', '24', '3', NULL);


-- 3a FAIL SAFE: UPDATE COPIES -----------------------------------------------------------------------------------------

-- Mark all copies as 'Loaned' if they are currently on loan
UPDATE copies
SET availability_status = 'Loaned'
WHERE (resource_id, copy_num) IN (
    SELECT resource_id, copy_num
    FROM loans
    WHERE loan_return_date IS NULL
);

-- Mark all other copies as 'Available'
-- two conditions:
-- 1. if copy_num is NOT in the loaned_copies
-- 2. if copy WAS loand and HAS BEEN loan_return_date

UPDATE copies
SET availability_status = 'Available'
WHERE (resource_id, copy_num) NOT IN (
    SELECT resource_id, copy_num
    FROM loans
    WHERE loan_return_date IS NULL
)
OR (resource_id, copy_num) IN (
    SELECT resource_id, copy_num
    FROM loans
    WHERE loan_date IS NOT NULL AND loan_return_date IS NOT NULL
);



-- 3a VIEWS: CHECKING AVAILABILITY IN CASE I MESSED UP --------------------------------------------------------------------

-- copies availability (tells you total copies, how many available and loaned grouped by RESOURCE_ID)
CREATE OR REPLACE VIEW copy_availability AS
SELECT
    resource_id,
    COUNT(*) AS total_copies,
    SUM(CASE WHEN availability_status = 'Available' THEN 1 ELSE 0 END) AS available_copies,
    SUM(CASE WHEN availability_status = 'Loaned' THEN 1 ELSE 0 END) AS loaned_copies
FROM
    copies
GROUP BY
    resource_id;

-- book availability
CREATE OR REPLACE VIEW book_availability AS
SELECT
    r.resource_id,
    b.book_id,
    b.title AS book_title,
    b.author AS book_author,
    b.isbn AS book_isbn,
    b.book_format AS book_format,
    COUNT(CASE WHEN c.availability_status = 'Available' THEN c.copy_num END) AS available_copies,
    COUNT(CASE WHEN c.availability_status = 'Loaned' THEN c.copy_num END) AS unavailable_copies
FROM resources r
INNER JOIN books b ON r.resource_id = b.resource_id
LEFT JOIN copies c ON r.resource_id = c.resource_id
GROUP BY r.resource_id, b.book_id, b.title, b.author, b.isbn, b.book_format;


-- device availability
CREATE OR REPLACE VIEW device_availability AS
SELECT
    r.resource_id,
    d.device_id,
    d.manufacturer AS device_manufacturer,
    d.model_number AS device_model_number,
    d.device_type AS device_type,
    COUNT(CASE WHEN c.availability_status = 'Available' THEN 1 END) AS available_copies,
    COUNT(CASE WHEN c.availability_status = 'Loaned' THEN 1 END) AS unavailable_copies
FROM resources r
INNER JOIN devices d ON r.resource_id = d.resource_id
LEFT JOIN copies c ON r.resource_id = c.resource_id
GROUP BY r.resource_id, d.device_id, d.manufacturer, d.model_number, d.device_type;


-- select * from device_availability;


-- INSERT: RESERVATIONS DATA -------------------------------------------------------------------------

INSERT INTO reservations (user_id, resource_id, reserv_date, reserv_notif_date, reserv_expir_date, reserv_decline_count)
VALUES (202447890, 6, TO_DATE('2024-11-14', 'YYYY-MM-DD'), NULL, NULL, 0);

INSERT INTO reservations (user_id, resource_id, reserv_date, reserv_notif_date, reserv_expir_date, reserv_decline_count)
VALUES (200675782, 3, TO_DATE('2024-11-21', 'YYYY-MM-DD'), NULL, NULL, 0);

INSERT INTO reservations (user_id, resource_id, reserv_date, reserv_notif_date, reserv_expir_date, reserv_decline_count)
VALUES (202136290, 3, TO_DATE('2024-11-22', 'YYYY-MM-DD'), NULL, NULL, 0);

INSERT INTO reservations (user_id, resource_id, reserv_date, reserv_notif_date, reserv_expir_date, reserv_decline_count)
VALUES (202467706, 3, TO_DATE('2024-11-23', 'YYYY-MM-DD'), NULL, NULL, 0);

INSERT INTO reservations (user_id, resource_id, reserv_date, reserv_notif_date, reserv_expir_date, reserv_decline_count)
VALUES (202460717, 6, TO_DATE('2024-11-23', 'YYYY-MM-DD'), NULL, NULL, 0);

INSERT INTO reservations (user_id, resource_id, reserv_date, reserv_notif_date, reserv_expir_date, reserv_decline_count)
VALUES (199597776, 12, SYSDATE, NULL, NULL, 0);

select * from reservations;


    
-- 4 MANUAL PROCEDURE: A LOAN GETS RETURNED ----------------------------------------------------
-- PREREQUISITES
	-- 4.1 VIEW: See how many copies are available per resource_id
select * from copy_availability;


	-- 4.2 TRIGGER: Set expiry date if notif date not null
CREATE OR REPLACE TRIGGER set_reservation_expiry_date
BEFORE INSERT OR UPDATE ON reservations
FOR EACH ROW
BEGIN
    -- Set expiry date to 24 hours after the notification date
    IF :NEW.reserv_notif_date IS NOT NULL THEN
        :NEW.reserv_expir_date := :NEW.reserv_notif_date + INTERVAL '1' DAY;
    END IF;
END;
/



-- MANUAL UPDATE OF LOANS

-- 1. Identify the loan we want to return
SELECT * FROM loans WHERE user_id = 199027462 AND resource_id = 3 AND loan_return_date IS NULL; 

-- 2. Update the loan to add a return date
UPDATE loans
SET loan_return_date = TO_DATE('2024-11-27', 'YYYY-MM-DD')
WHERE user_id = 199027462 AND resource_id = 3 AND loan_return_date IS NULL;

	-- 3. IMPORTANT! Manually update the table to ensure copies return are marked available and vice cersa
UPDATE copies
SET availability_status = 'Loaned'
WHERE (resource_id, copy_num) IN (
    SELECT resource_id, copy_num
    FROM loans
    WHERE loan_return_date IS NULL
);

UPDATE copies
SET availability_status = 'Available'
WHERE (resource_id, copy_num) NOT IN (
    SELECT resource_id, copy_num
    FROM loans
    WHERE loan_date IS NOT NULL AND loan_return_date IS NULL
);

    -- 4. IMPORTANT! Notify the next reservation
    -- note: the item that was returned by 199027462. result resource_id=3
SELECT resource_id
FROM copies
WHERE availability_status = 'Available'
    AND resource_id = (SELECT resource_id FROM loans WHERE user_id = 199027462 and resource_id=3);

-- Update the notification date for the next person in the queue:
UPDATE reservations
SET reserv_notif_date = SYSDATE
WHERE reservation_id = (
    SELECT reservation_id
    FROM reservations
    WHERE resource_id = (SELECT resource_id FROM loans WHERE user_id = 199027462 and resource_id=3)
        AND (reserv_notif_date IS NULL OR reserv_notif_date < SYSDATE)
    ORDER BY reservation_id
    FETCH FIRST ROW ONLY
);

-- Confirm the update worked:
SELECT * FROM reservations WHERE resource_id = 3;


-- 5 MANUAL PROCEDURE: RESERVATION AVAILABLE BECOMES A LOAN ----------------------------------------------------
-- PREREQUISITES
	-- 5.1 TRIGGER: Enforce the loan limit
CREATE OR REPLACE TRIGGER enforce_loan_limit
BEFORE INSERT ON loans
FOR EACH ROW
DECLARE
    active_loans_count NUMBER;
    user_loan_limit NUMBER;
BEGIN
    -- Fetch the current count of active loans for the user
    SELECT COUNT(*)
    INTO active_loans_count
    FROM loans
    WHERE user_id = :NEW.user_id
      AND loan_return_date IS NULL;

    -- Fetch the loan limit for the user
    SELECT loan_limit
    INTO user_loan_limit
    FROM users
    WHERE user_id = :NEW.user_id;

    -- Raise an error if the user exceeds their loan limit. Check if app okay w this
    IF active_loans_count >= user_loan_limit THEN
        RAISE_APPLICATION_ERROR(-20001, 'Loan limit exceeded for user ' || :NEW.user_id);
    END IF;
END;
/


-- MANUAL UPDATE OF LOANS IF RESERVATION IS AVAILABLE
	-- Step 1: Check Available Copies
-- Identify the resource_id from reservation_id = 2
-- NOTE: This is the same person who got a notification that resource_id is available!
SELECT resource_id FROM reservations WHERE reserv_notif_date IS NOT NULL;

-- Get the copy_num that's available for that resource_id
-- Use the resource_id to find the available copy in the COPIES table but also, make sure they DID get notified :P
SELECT copy_num
FROM copies
WHERE resource_id = (SELECT resource_id FROM reservations WHERE reservation_id = 2 AND reserv_notif_date IS NOT NULL)
  AND availability_status = 'Available'
ORDER BY copy_num
FETCH FIRST 1 ROW ONLY;
-- result: copy_num = 3, resource_id = 3 is now free to loan


	-- Step 2: Insert a New Loan
-- Insert a new loan for the user based on the available copy
INSERT INTO loans (loan_date, user_id, resource_id, copy_num, loan_return_date)
VALUES (
    SYSDATE,                       -- Loan date is today
    202447890,                     -- User ID from the reservation
    3,                              -- Resource ID from the reservation
    3,                              -- Copy number identified in Step 1
    NULL                           -- Loan return date starts as NULL
);



-- Verifying
select * from loans where user_id = 202447890 and resource_id = (SELECT resource_id FROM reservations WHERE reservation_id = 2);

	-- Step 3: Remove the Reservation
-- Delete the fulfilled reservation
DELETE FROM reservations WHERE reservation_id = 2;


-- Verifying
select * from reservations where user_id = 202447890 and resource_id = 3;
-- should say 'No items to display' because their reservation is now a loan


-- FINES ---------------------------------------------------------------------------

-- PREREQUISITE: We need to know what the subtype is to get the fine_cap so we're updating this view :)

SELECT * FROM resource_type_view;

-- PREREQUISITE 2: create a function that bases fine computations on
-- The fine_amt is computed two ways:
-- 1. IF loan_return_date IS NOT NULL (meaning it's been returned) AND loan_return_date > loan_due_date, THEN fine_amt = loan_return_date - loan_due_date (the fine is 1 per day)
-- 2. IF loan_return_date IS NULL (hasn't been returned) AND loan_return_date > loan_due_date, THEN fine_amt = loan_return_date - loan_due_date (the fine is 1 per day)

-- There are limitations:
-- 1. The MAXIMUM fine amount IF loan_return_date IS NULL is as follows (Note: cap IF the resource is considered LOST or damaged):
-- Books (including e-books): 100
-- e-readers: 100
-- tablets: 300
-- laptops: 500
-- 2. The MAXIMUM fine amount IF loan_return_date IS NOT NULL is as follows (Note: cap IF the resource is considered as LATE RETURN): above cap*0.5


-- Step 1: Create a function 
CREATE OR REPLACE FUNCTION calculate_fine (
    p_loan_id IN NUMBER
) RETURN NUMBER IS
    resource_type VARCHAR2(20);
    resource_subtype VARCHAR2(20);
    loan_due_date DATE;
    loan_return_date DATE;
    fine_days NUMBER;
    max_fine NUMBER;
BEGIN
    SELECT 
        rtv.resource_type,
        rtv.resource_subtype,
        l.loan_due_date,
        l.loan_return_date
    INTO 
        resource_type,
        resource_subtype,
        loan_due_date,
        loan_return_date
    FROM 
        loans l
    JOIN 
        resource_type_view rtv ON l.resource_id = rtv.resource_id
    WHERE 
        l.loan_id = p_loan_id;

    IF loan_return_date IS NOT NULL THEN
        -- Case 1: Late return
        fine_days := CEIL(GREATEST(loan_return_date - loan_due_date, 0));
        CASE
            WHEN resource_type = 'Book' AND resource_subtype = 'Physical Book' THEN max_fine := 50;
            WHEN resource_type = 'Book' AND resource_subtype = 'Ebook' THEN max_fine := 50;
            WHEN resource_type = 'Device' AND resource_subtype = 'E-READER' THEN max_fine := 50;
            WHEN resource_type = 'Device' AND resource_subtype = 'TABLET' THEN max_fine := 150;
            WHEN resource_type = 'Device' AND resource_subtype = 'LAPTOP' THEN max_fine := 250;
            ELSE max_fine := 50; -- Default for unexpected cases
        END CASE;
    ELSE
        -- Case 2: Lost/Damaged
        fine_days := CEIL(GREATEST(SYSDATE - loan_due_date, 0));
        CASE
            WHEN resource_type = 'Book' AND resource_subtype = 'Physical Book' THEN max_fine := 100;
            WHEN resource_type = 'Book' AND resource_subtype = 'Ebook' THEN max_fine := 100;
            WHEN resource_type = 'Device' AND resource_subtype = 'E-READER' THEN max_fine := 100;
            WHEN resource_type = 'Device' AND resource_subtype = 'TABLET' THEN max_fine := 300;
            WHEN resource_type = 'Device' AND resource_subtype = 'LAPTOP' THEN max_fine := 500;
            ELSE max_fine := 100; -- Default for unexpected cases
        END CASE;
    END IF;

    RETURN LEAST(fine_days, max_fine);
END;
/

-- Step 2: Let's find out who's been naughty
-- late returners
SELECT 
    loan_id,
    user_id,
    resource_id,
    copy_num,
    CEIL(loan_return_date - loan_due_date) AS days_overdue,
    loan_return_date,
    loan_due_date
FROM loans
WHERE loan_return_date > loan_due_date AND loan_return_date IS NOT NULL
ORDER BY days_overdue ASC, loan_return_date DESC;

-- haven't even bothered to return
SELECT 
    loan_id,
    user_id,
    resource_id,
    copy_num,
    CEIL(SYSDATE - loan_due_date) AS days_overdue,
    loan_due_date
FROM loans 
WHERE TRUNC(SYSDATE) > TRUNC(loan_due_date) AND loan_return_date IS NULL;


-- Step 3: Batch update the fines using my function above
INSERT INTO fines (loan_id, user_id, fine_amt, fine_status, fine_date)
SELECT 
    l.loan_id, 
    l.user_id, 
    calculate_fine(l.loan_id), 
    CASE 
        WHEN l.loan_return_date IS NOT NULL THEN 'PAID'
        ELSE 'NOT PAID'
    END AS fine_status,
    CASE 
        WHEN l.loan_return_date IS NOT NULL THEN l.loan_return_date
        ELSE SYSDATE
    END AS fine_date
FROM loans l
WHERE 
    (l.loan_return_date > l.loan_due_date OR (l.loan_return_date IS NULL AND SYSDATE > l.loan_due_date))
    AND NOT EXISTS (
        SELECT 1 
        FROM fines f 
        WHERE f.loan_id = l.loan_id
    );

SELECT * FROM fines order by fine_amt desc;
select * from users;


-- UPDATE: Suspend bad bois with fines > 10
    -- Step 1: Find out who they are
SELECT DISTINCT 
    users.user_id, 
    users.user_full_name, 
    users.user_account_status,
    fines.fine_amt
FROM users
JOIN fines
ON users.user_id = fines.user_id
WHERE fines.fine_amt > 10 AND fines.fine_status = 'NOT PAID';

    -- Step 2: Exile naughty users
UPDATE users
SET user_account_status = 'Suspended'
WHERE user_id IN (
    SELECT DISTINCT fines.user_id
    FROM fines
    WHERE fines.fine_amt > 10 AND fines.fine_status = 'NOT PAID'
);




-- SQL QUERIES -----------------------------------------------------------------------------------------
-- This portion represents all the SQL queries that are shown in the word file.

-- SIMPLE QUERIES including SELECT and WHERE

-- 1  View all users in the database who were added in 2024

SELECT user_id, user_full_name, user_type
FROM users
WHERE user_id BETWEEN 202400000 AND 202499999;

-- 2  View all reservations of a specific user

SELECT user_id, reservation_id, resource_id, reserv_date 
FROM reservations 
WHERE user_id = 202460717;

-- 3  View all books about a particular subject (for example: biology)

SELECT book_id, title, author, class_number, isbn, book_format
FROM books
WHERE class_number BETWEEN 570 AND 579;

-- 4  View all loaned items which are overdue to be returned

SELECT loan_id, user_id, resource_id, loan_due_date
FROM loans 
WHERE loan_due_date < SYSDATE AND loan_return_date IS NULL
ORDER BY loan_due_date ASC;

-- INTERMEDIATE QUERIES including JOIN

-- 5  Find the devices that are currently being loaned and their usersÃ¢‚¬„¢ details

SELECT u.user_id, u.user_full_name, r.name as "DEVICE", l.loan_date, l.loan_due_date
FROM resource_type_view r
JOIN loans l ON r.resource_id = l.resource_id
JOIN users u ON l.user_id = u.user_id
WHERE l.loan_return_date IS NULL AND r.resource_type = 'Device';



-- 6  View all copies of physical books that are available to be loaned

SELECT c.copy_num, b.title, c.availability_status 
FROM books b
JOIN copies c ON b.resource_id = c.resource_id
WHERE b.book_format = 'Physical Book' AND c.availability_status = 'Available';

-- 7   List all resources currently loaned by a particular user

SELECT u.user_id, u.user_full_name, l.resource_id, r.name as "RESOURCE_NAME", l.loan_date, l.loan_due_date
FROM loans l
JOIN users u ON l.user_id = u.user_id
JOIN resource_type_view r ON l.resource_id = r.resource_id
WHERE l.loan_return_date IS NULL AND u.user_id = 200263880;

-- 8  Find details of all outstanding fines and the user associated with each one

SELECT u.user_id, u.user_full_name, f.fine_amt AS fine_amount, f.fine_status
FROM Users u LEFT JOIN Fines f ON u.user_id = f.user_id
WHERE f.fine_status = 'NOT PAID'
ORDER BY u.user_id;

-- ADVANCED QUERIES including JOIN and GROUP BY

-- 9  View how many active loans each individual user has. (This differs from the users_loan_count view, which shows all loans each user has taken out rather than how many are still active).

SELECT u.user_full_name, COUNT(l.loan_id) AS active_loans
FROM users u
JOIN loans l ON u.user_id = l.user_id
WHERE l.loan_return_date IS NULL
GROUP BY u.user_full_name
ORDER BY active_loans DESC;

-- 10  View a list of users who have outstanding fines to pay, with an aggregate of all the money they owe along with the number of fines they have incurred and whether this has caused them to be suspended. 

SELECT  u.user_id, u.user_full_name, u.user_account_status,
SUM(calculate_fine(l.loan_id)) total_owed, COUNT(f.loan_id) AS number_of_fines
FROM users u
JOIN loans l ON u.user_id = l.user_id
JOIN fines f ON l.loan_id = f.loan_id
WHERE l.loan_return_date IS NULL
GROUP BY u.user_id, u.user_full_name, u.user_account_status
ORDER BY u.user_account_status, total_owed desc;

-- 11  View how many times each resource has been loaned, in descending order

SELECT l.resource_id, rtv.name, rtv.resource_subtype, COUNT(l.resource_id) AS loan_count
FROM loans l
JOIN resource_type_view rtv ON l.resource_id = rtv.resource_id
GROUP BY rtv.name, l.resource_id, rtv.resource_subtype
ORDER BY loan_count DESC;


-- 12  View how many copies of each resource are available and where to find them. Ordered by location to make it easier to find them. The location Ã¢‚¬ËœX-000Ã¢‚¬„¢ indicates that the resource is an ebook and is therefore available online.

SELECT r.resource_id, rtv.name, r.location, COUNT(c.copy_num) AS available_copies
FROM resource_type_view rtv
JOIN resources r ON rtv.resource_id = r.resource_id
JOIN copies c ON r.resource_id = c.resource_id
WHERE c.availability_status = 'Available'
GROUP BY r.resource_id, rtv.name, r.location
ORDER BY r.location;